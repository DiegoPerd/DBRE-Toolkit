# .azure-pipelines/pr-validation.yml

# Trigger on Pull Requests targeting the 'main' branch
pr:
  branches:
    include:
    - main
  paths:
    include:
    - 'src/AdventureWorks_Azs.database/**'

# Define the matrix strategy
strategy:
  matrix:
    DEV:
      environmentName: 'DEV'
      serviceConnection: 'DEV Azure Connection' 
      variableGroup: 'DEV Secrets'        
    QA:
      environmentName: 'QA'
      serviceConnection: 'QA Azure Connection'  
      variableGroup: 'QA Secrets'         

pool:
  vmImage: 'windows-latest'

jobs:
- deployment: DeployNonProd
  displayName: 'Deploy to ${{ variables.environmentName }}'
  # Link the job to the ADO Environment for deployment history
  environment: ${{ variables.environmentName }}
  
  # Link the variable group for this specific matrix leg
  variables:
  - group: ${{ variables.variableGroup }}

  strategy:
    runOnce:
      deploy:
        steps:
        - checkout: self

        - task: UsePythonVersion@0
          displayName: 'Set up Python 3.10'
          inputs:
            versionSpec: '3.10'

        - script: |
            pip install sqlfluff
            sqlfluff lint src/AdventureWorks_Azs.database/
          displayName: 'Install and run SQLFluff linter'

        - task: DotNetCoreCLI@2
          displayName: 'Build SQL Project'
          inputs:
            command: 'build'
            projects: '**/AdventureWorks_Azs.database.sqlproj'

        - task: SqlAzureDacpacDeployment@1
          displayName: 'Deploy DACPAC to ${{ variables.environmentName }}'
          inputs:
            azureSubscription: ${{ variables.serviceConnection }}
            AuthenticationType: 'servicePrincipal'
            ConnectionString: $(sqlConnectionString)
            DacpacFile: '$(System.DefaultWorkingDirectory)/**/AdventureWorks_Azs.database.dacpac'
        
        - task: PowerShell@2
          displayName: 'Run Tests on ${{ variables.environmentName }} (Simulation)'
          inputs:
            targetType: 'inline'
            script: 'Write-Host "Simulating tests on ${{ variables.environmentName }}..."'